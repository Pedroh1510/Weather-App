{"version":3,"sources":["components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","handleKeyPress","event","key","consulta","state","search","validKey","temp","temp_min","temp_max","city","humidity","description","icon","base","bind","str","encodeURIComponent","replace","c","charCodeAt","toString","this","ajustadoEncodeURIComponent","url","console","log","fetch","then","res","json","weather","name","main","setState","type","onKeyPress","onChange","target","value","onClickCapture","className","id","src","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6SAIqBA,G,kBACpB,WAAYC,GAAQ,IAAD,8BAClB,+CAgBDC,eAAiB,SAACC,GACC,UAAdA,EAAMC,KACT,EAAKC,YAjBN,EAAKC,MAAQ,CACZC,OAAQ,GACRC,UAAU,EACVC,KAAM,EACNC,SAAU,EACVC,SAAU,EACVC,KAAM,GACNC,SAAU,EACVC,YAAa,GACbC,KAAM,GACNC,KAAM,QAEP,EAAKX,SAAW,EAAKA,SAASY,KAAd,gBAChB,EAAKf,eAAiB,EAAKA,eAAee,KAApB,gBAfJ,E,wFAuBQC,GAC1B,OAAOC,mBAAmBD,GAAKE,QAAQ,YAAY,SAASC,GAC3D,MAAO,IAAMA,EAAEC,WAAW,GAAGC,SAAS,S,iCAI5B,IAAD,OACJX,EAAOY,KAAKC,2BAA2BD,KAAKlB,MAAMC,QAElDmB,EAAG,4DAAwDd,EAAxD,kBADM,mCACN,4BACTe,QAAQC,IAAIF,GACZG,MAAMH,GACJI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAAU,IACRlB,EAAgBkB,EAAKC,QAAQ,GAA7BnB,YACFC,EAAI,0CAAsCiB,EAAKC,QAAQ,GAAGlB,KAAtD,QACJH,EAAOoB,EAAKE,KACVlB,EAASgB,EAAThB,KAJO,EAKgCgB,EAAKG,KAA5C1B,EALO,EAKPA,KAAMC,EALC,EAKDA,SAAUC,EALT,EAKSA,SAAUE,EALnB,EAKmBA,SAClC,EAAKuB,SAAS,CACb3B,OACAG,OACAC,WACAC,cACAH,WACAD,WACAK,OACAC,c,+BAIM,IAAD,OACR,OACC,6BACC,oDACA,oDACA,2BACCqB,KAAK,OACLC,WAAYd,KAAKtB,eACjBqC,SAAU,SAACpC,GACV,EAAKiC,SAAS,CAAE7B,OAAQJ,EAAMqC,OAAOC,WAGvC,2BAAOJ,KAAK,SAASI,MAAM,QAAQC,eAAgBlB,KAAKnB,WACxD,yBAAKsC,UAAWnB,KAAKlB,MAAMU,MAC1B,kDAAwBQ,KAAKlB,MAAMM,MACnC,wDAAwBY,KAAKlB,MAAMQ,aACnC,4CAAkBU,KAAKlB,MAAMG,MAC7B,yCAAee,KAAKlB,MAAMK,UAC1B,yCAAea,KAAKlB,MAAMI,UAC1B,yCAAec,KAAKlB,MAAMO,UAC1B,yBAAK+B,GAAG,QAAQC,IAAKrB,KAAKlB,MAAMS,KAAM+B,IAAI,uB,GA3EVC,cCStBC,MARf,WACC,OACC,yBAAKL,UAAU,OACd,kBAAC,EAAD,CAAS/B,KAAK,gBCIGqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.6cbdd9f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./weather.css\";\r\n\r\nexport default class Weather extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsearch: \"\",\r\n\t\t\tvalidKey: false,\r\n\t\t\ttemp: 0,\r\n\t\t\ttemp_min: 0,\r\n\t\t\ttemp_max: 0,\r\n\t\t\tcity: \"\",\r\n\t\t\thumidity: 0,\r\n\t\t\tdescription: \"\",\r\n\t\t\ticon: \"\",\r\n\t\t\tbase: \"none\"\r\n\t\t};\r\n\t\tthis.consulta = this.consulta.bind(this);\r\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\r\n\t}\r\n\thandleKeyPress = (event) => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\tthis.consulta();\r\n\t\t}\r\n\t};\r\n\r\n\tajustadoEncodeURIComponent(str) {\r\n\t\treturn encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\r\n\t\t\treturn \"%\" + c.charCodeAt(0).toString(16);\r\n\t\t});\r\n\t}\r\n\r\n\tconsulta() {\r\n\t\tconst city = this.ajustadoEncodeURIComponent(this.state.search);\r\n\t\tconst apikey = \"e8aec5dd17aedfa681482bd986fbead9\";\r\n\t\tconst url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apikey}&units=metric&lang=pt_br`;\r\n\t\tconsole.log(url);\r\n\t\tfetch(url)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => {\r\n\t\t\t\tconst { description } = json.weather[0];\r\n\t\t\t\tconst icon = `http://openweathermap.org/img/w/${json.weather[0].icon}.png`;\r\n\t\t\t\tconst city = json.name;\r\n\t\t\t\tconst { base } = json;\r\n\t\t\t\tconst { temp, temp_min, temp_max, humidity } = json.main;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttemp,\r\n\t\t\t\t\tcity,\r\n\t\t\t\t\thumidity,\r\n\t\t\t\t\tdescription,\r\n\t\t\t\t\ttemp_max,\r\n\t\t\t\t\ttemp_min,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tbase\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Previsão do tempo</h2>\r\n\t\t\t\t<p>Exemplo: São Paulo</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonKeyPress={this.handleKeyPress}\r\n\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\tthis.setState({ search: event.target.value });\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"button\" value=\"Enter\" onClickCapture={this.consulta} />\r\n\t\t\t\t<div className={this.state.base}>\r\n\t\t\t\t\t<h2>Cidade encontrada: {this.state.city}</h2>\r\n\t\t\t\t\t<h2>Descrição do clima {this.state.description}</h2>\r\n\t\t\t\t\t<h2>Temperatura: {this.state.temp}</h2>\r\n\t\t\t\t\t<h2>temp_max: {this.state.temp_max}</h2>\r\n\t\t\t\t\t<h2>temp_min: {this.state.temp_min}</h2>\r\n\t\t\t\t\t<h2>Humidade: {this.state.humidity}</h2>\r\n\t\t\t\t\t<img id=\"wicon\" src={this.state.icon} alt=\"Weather icon\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Weather from \"./components/weather\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Weather city=\"Sao_Paulo\"></Weather>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}