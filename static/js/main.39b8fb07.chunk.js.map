{"version":3,"sources":["components/Result.js","components/NoneResult.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Result","props","this","city","desciption","temp","temp_max","temp_min","humidity","src","icon","Component","components","Weather","handleKeyPress","event","key","consulta","state","search","validKey","description","isVisorActive","bind","str","encodeURIComponent","replace","c","charCodeAt","toString","ajustadoEncodeURIComponent","url","fetch","then","res","json","weather","name","main","setState","type","onKeyPress","onChange","target","value","onClickCapture","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SAEqBA,G,kBACpB,WAAYC,GAAQ,uE,sEAInB,OACC,6BACC,uCAAaC,KAAKD,MAAME,MACxB,sCAAYD,KAAKD,MAAMG,YACvB,kDAAwBF,KAAKD,MAAMI,MACnC,gDAAsBH,KAAKD,MAAMK,UACjC,gDAAsBJ,KAAKD,MAAMM,UACjC,yCAAeL,KAAKD,MAAMO,UAC1B,yBAAKC,IAAKP,KAAKD,MAAMS,Y,GAbWC,cCAfC,E,iLAEnB,OACC,6BACC,+C,GAJoCD,aCInBE,E,YACpB,WAAYZ,GAAQ,IAAD,8BAClB,+CAgBDa,eAAiB,SAACC,GACC,UAAdA,EAAMC,KACT,EAAKC,YAjBN,EAAKC,MAAQ,CACZC,OAAQ,GACRC,UAAU,EACVf,KAAM,EACNE,SAAU,EACVD,SAAU,EACVH,KAAM,GACNK,SAAU,EACVa,YAAa,GACbX,KAAM,GACNY,eAAe,GAEhB,EAAKL,SAAW,EAAKA,SAASM,KAAd,gBAChB,EAAKT,eAAiB,EAAKA,eAAeS,KAApB,gBAfJ,E,wFAuBQC,GAC1B,OAAOC,mBAAmBD,GAAKE,QAAQ,YAAY,SAASC,GAC3D,MAAO,IAAMA,EAAEC,WAAW,GAAGC,SAAS,S,iCAI5B,IAAD,OACJ1B,EAAOD,KAAK4B,2BAA2B5B,KAAKgB,MAAMC,QAClDY,EAAG,4DAAwD5B,EAAxD,mEACT6B,MAAMD,GACJE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GAAU,IACRd,EAAgBc,EAAKC,QAAQ,GAA7Bf,YACFX,EAAI,0CAAsCyB,EAAKC,QAAQ,GAAG1B,KAAtD,QACJP,EAAOgC,EAAKE,KAHH,EAIgCF,EAAKG,KAA5CjC,EAJO,EAIPA,KAAME,EAJC,EAIDA,SAAUD,EAJT,EAISA,SAAUE,EAJnB,EAImBA,SAClC,EAAK+B,SAAS,CACbpC,OACAkB,cACAhB,OACAC,WACAC,WACAC,WACAE,OACAY,eAAe,S,+BAIT,IAAD,OACR,OACC,6BACC,oDACA,oDACA,2BACCkB,KAAK,OACLC,WAAYvC,KAAKY,eACjB4B,SAAU,SAAC3B,GACV,EAAKwB,SAAS,CAAEpB,OAAQJ,EAAM4B,OAAOC,WAGvC,2BAAOJ,KAAK,SAASI,MAAM,QAAQC,eAAgB3C,KAAKe,WACvDf,KAAKgB,MAAMI,cACX,kBAAC,EAAD,CACCnB,KAAMD,KAAKgB,MAAMf,KACjBkB,YAAanB,KAAKgB,MAAMG,YACxBhB,KAAMH,KAAKgB,MAAMb,KACjBC,SAAUJ,KAAKgB,MAAMZ,SACrBC,SAAUL,KAAKgB,MAAMX,SACrBC,SAAUN,KAAKgB,MAAMV,SACrBE,KAAMR,KAAKgB,MAAMR,OAGlB,kBAAC,EAAD,W,GA5EgCC,aCOtBmC,MARf,WACC,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,CAAS5C,KAAK,gBCIG6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39b8fb07.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Result extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Cidade: {this.props.city}</h2>\r\n\t\t\t\t<h2>Clima: {this.props.desciption}</h2>\r\n\t\t\t\t<h2>Temperatura Atual: {this.props.temp}</h2>\r\n\t\t\t\t<h2>Temperatura max: {this.props.temp_max}</h2>\r\n\t\t\t\t<h2>Temperatura min: {this.props.temp_min}</h2>\r\n\t\t\t\t<h2>Humidade: {this.props.humidity}</h2>\r\n\t\t\t\t<img src={this.props.icon} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class components extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Aguardando</h2>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./weather.css\";\r\nimport FullResult from \"./Result\";\r\nimport NoneResult from \"./NoneResult\";\r\n\r\nexport default class Weather extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsearch: \"\",\r\n\t\t\tvalidKey: false,\r\n\t\t\ttemp: 0,\r\n\t\t\ttemp_min: 0,\r\n\t\t\ttemp_max: 0,\r\n\t\t\tcity: \"\",\r\n\t\t\thumidity: 0,\r\n\t\t\tdescription: \"\",\r\n\t\t\ticon: \"\",\r\n\t\t\tisVisorActive: false\r\n\t\t};\r\n\t\tthis.consulta = this.consulta.bind(this);\r\n\t\tthis.handleKeyPress = this.handleKeyPress.bind(this);\r\n\t}\r\n\thandleKeyPress = (event) => {\r\n\t\tif (event.key === \"Enter\") {\r\n\t\t\tthis.consulta();\r\n\t\t}\r\n\t};\r\n\r\n\tajustadoEncodeURIComponent(str) {\r\n\t\treturn encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\r\n\t\t\treturn \"%\" + c.charCodeAt(0).toString(16);\r\n\t\t});\r\n\t}\r\n\r\n\tconsulta() {\r\n\t\tconst city = this.ajustadoEncodeURIComponent(this.state.search);\r\n\t\tconst url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=e8aec5dd17aedfa681482bd986fbead9&units=metric&lang=pt_br`;\r\n\t\tfetch(url)\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => {\r\n\t\t\t\tconst { description } = json.weather[0];\r\n\t\t\t\tconst icon = `http://openweathermap.org/img/w/${json.weather[0].icon}.png`;\r\n\t\t\t\tconst city = json.name;\r\n\t\t\t\tconst { temp, temp_min, temp_max, humidity } = json.main;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tcity,\r\n\t\t\t\t\tdescription,\r\n\t\t\t\t\ttemp,\r\n\t\t\t\t\ttemp_max,\r\n\t\t\t\t\ttemp_min,\r\n\t\t\t\t\thumidity,\r\n\t\t\t\t\ticon,\r\n\t\t\t\t\tisVisorActive: true\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Previsão do tempo</h2>\r\n\t\t\t\t<p>Exemplo: São Paulo</p>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tonKeyPress={this.handleKeyPress}\r\n\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\tthis.setState({ search: event.target.value });\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t\t<input type=\"button\" value=\"Enter\" onClickCapture={this.consulta} />\r\n\t\t\t\t{this.state.isVisorActive ? (\r\n\t\t\t\t\t<FullResult\r\n\t\t\t\t\t\tcity={this.state.city}\r\n\t\t\t\t\t\tdescription={this.state.description}\r\n\t\t\t\t\t\ttemp={this.state.temp}\r\n\t\t\t\t\t\ttemp_max={this.state.temp_max}\r\n\t\t\t\t\t\ttemp_min={this.state.temp_min}\r\n\t\t\t\t\t\thumidity={this.state.humidity}\r\n\t\t\t\t\t\ticon={this.state.icon}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<NoneResult />\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Weather from \"./components/weather\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Weather city=\"Sao_Paulo\"></Weather>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}